//=============================================================================
//
// シーン処理
// Author : YUUSAN KA
//--------------------------
// DATA : 2017/04/27
//
//=============================================================================
//*****************************************************************************
//   インクルードファイル
//*****************************************************************************
#include "main.h"
#include "renderer.h"
#include "scene.h"

//*****************************************************************************
//   静的メンバ変数
//*****************************************************************************
CScene *CScene::m_Top[ SCENE_PRIORITY_MAX ] = {};        // シーン
int CScene::m_nNumScene = 0;                        // 総数

//==================================================================================================================================================
//   コンストラクタ
//==================================================================================================================================================
CScene::CScene( int nPriority )
{
	if( m_Top[ nPriority ] == NULL )      // NULLだったら
	{
		m_Top[ nPriority ] = this;        // 自分を代入
		m_nPriority = nPriority;
		m_bDelete = false;
		m_nNumScene++;                        // 総数をカウント
	}
	else
	{
		CScene *scene = m_Top[ nPriority ];
		while (scene->m_Next != NULL)
		{
			scene = scene->m_Next;
		}
		scene->m_Next = this;
		scene->m_Next->m_nPriority = nPriority;
		scene->m_Next->m_bDelete= m_bDelete;
		scene->m_Next->m_Prev = scene;
		m_nNumScene++;                        // 総数をカウント
	}
}

//==================================================================================================================================================
//   デストラクタ
//==================================================================================================================================================
CScene::~CScene()
{
}

//==================================================================================================================================================
//   更新処理
//==================================================================================================================================================
void CScene::UpdateAll(void)
{
	// 最大数分ループ
	for( int nCntPriority = 0; nCntPriority < SCENE_PRIORITY_MAX; nCntPriority++ )
	{
		CScene *scene = m_Top[nCntPriority];
		while (scene != NULL)      // NULLだったら
		{
			scene->Update();
			scene = scene->m_Next;
		}

		CScene *scenePrev;
		CScene *sceneNext;
		scene = m_Top[nCntPriority];
		scenePrev = m_Top[nCntPriority];
		while (scene != NULL)
		{
			sceneNext = scene->m_Next;
			if (scene->m_bDelete)
			{
				if (scene == m_Top[nCntPriority])
				{
					m_Top[nCntPriority] = scene->m_Next;
					delete scene;
				}
				else
				{
					scenePrev->m_Next = scene->m_Next;
					delete scene;
				}
			}
			else
			{
				scenePrev = scene;
			}
			scene = scene->m_Next;
		}
	}
}

//==================================================================================================================================================
//   描画処理
//==================================================================================================================================================
void CScene::DrawAll(void)
{
	// 最大数分ループ
	for( int nCntPriority = 0; nCntPriority < SCENE_PRIORITY_MAX; nCntPriority++ )
	{
		CScene *scene = m_Top[nCntPriority];
		while(scene != NULL)      // NULLだったら
		{
			scene->Draw();
			scene = scene->m_Next;
		}
	}
}

//==================================================================================================================================================
//   リリース処理
//==================================================================================================================================================
void CScene::ReleaseAll(void)
{
	// 最大数分ループ
	for( int nCntPriority = 0; nCntPriority < SCENE_PRIORITY_MAX; nCntPriority++ )
	{
		/*
		while (m_Top[nCntPriority] != NULL)      // NULLだったら
		{
			CScene *scene = m_Top[nCntPriority]->m_Next;
			m_Top[nCntPriority]->Uninit();
			m_Top[nCntPriority] = scene;
		}
		*/

		CScene *scene = m_Top[nCntPriority];
		CScene *sceneNext;
		while (scene != NULL)      // NULLだったら
		{
			sceneNext = scene->m_Next;
			scene->Uninit();
			scene = sceneNext;
		}
		m_Top[nCntPriority] = NULL;
	}
}

//==================================================================================================================================================
//   sceneのリリース処理
//==================================================================================================================================================
void CScene::Release(void)
{
	/*
	CScene *scene = this;
	if (scene != NULL)      // NULLだったら
	{
		// 前のシーンのNEXTアドレスの代入
		if (scene->m_Prev != NULL)
		{
			scene->m_Prev->m_Next = scene->m_Next;
		}
		// 後のシーンのPREVアドレスの代入
		if (scene->m_Next != NULL)
		{
			scene->m_Next->m_Prev = scene->m_Prev;
		}
		delete scene;      // sceneを消す
		scene = NULL;      // アドレスにNULLを入れる
		m_nNumScene--;     // 総数をカウント
	}
	*/
	m_bDelete = true;
}

//==================================================================================================================================================
//   sceneの取得処理
//==================================================================================================================================================
CScene *CScene::GetScene( int nPriority)
{
	return m_Top[ nPriority ];
}

//==================================================================================================================================================
//   タイプセットの処理
//==================================================================================================================================================
void CScene::SetObjType( OBJTYPE objType )
{
	m_objType = objType;
}

//==================================================================================================================================================
//   タイプを取得の処理
//==================================================================================================================================================
CScene::OBJTYPE CScene::GetObjType(void)
{
	return m_objType;
}

//==================================================================================================================================================
//   座標を取得の処理
//==================================================================================================================================================
D3DXVECTOR3 CScene::GetPos(void)
{
	return m_pos;
}
